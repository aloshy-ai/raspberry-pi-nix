#!/usr/bin/env bash

# Exit on error, undefined variables, and prevent pipeline errors from being masked
set -euo pipefail
IFS=$'\n\t'

# Script variables
IMAGE_NAME="aloshy-ai/raspberry-pi4-runner"
TAG="latest"

# Check if Docker image exists
if ! docker image inspect "${IMAGE_NAME}:${TAG}" >/dev/null 2>&1; then
    echo "Docker image ${IMAGE_NAME}:${TAG} not found. Building it now..."
    "$(dirname "$0")/build"
fi

# Extract GitHub user and repo from git remote URL
REMOTE_URL=$(git config --get remote.origin.url)
if [[ $REMOTE_URL =~ github\.com[/:]([^/]+)/([^/]+)(\.git)?$ ]] || [[ $REMOTE_URL =~ git@github\.com[:]([^/]+)/([^/]+)(\.git)?$ ]]; then
    GITHUB_USER="${BASH_REMATCH[1]}"
    GITHUB_REPO="${BASH_REMATCH[2]}"
else
    echo "Error: Could not extract GitHub user and repo from remote URL"
    echo "Remote URL: ${REMOTE_URL}"
    echo "Please ensure you're in a git repository with a GitHub remote"
    echo "Or provide them manually: $0 GITHUB_USER GITHUB_REPO"
    exit 1
fi

# Allow manual override
if [ "$#" -eq 2 ]; then
    GITHUB_USER="$1"
    GITHUB_REPO="$2"
fi

CONTAINER="${GITHUB_REPO}-runner"

# Check required environment variables
if [ -z "${GITHUB_ACCESS_TOKEN:-}" ]; then
    echo "Error: GITHUB_ACCESS_TOKEN environment variable is required"
    exit 1
fi

if [ -z "${RUNNER_NAME:-}" ]; then
    echo "Error: RUNNER_NAME environment variable is required"
    exit 1
fi

# Remove existing container if it exists
if docker ps -q -a -f "name=${CONTAINER}" | grep -q .; then
    echo "Removing existing container..."
    docker rm --force "${CONTAINER}" > /dev/null
fi

# Start new container
echo "Starting runner container for ${GITHUB_USER}/${GITHUB_REPO}..."
docker run --restart always --name "${CONTAINER}" \
    -e GITHUB_USER="${GITHUB_USER}" \
    -e GITHUB_REPO="${GITHUB_REPO}" \
    -e GITHUB_ACCESS_TOKEN="${GITHUB_ACCESS_TOKEN}" \
    -e RUNNER_NAME="${RUNNER_NAME}" \
    "${IMAGE_NAME}:${TAG}"

echo "Runner container started successfully!"
